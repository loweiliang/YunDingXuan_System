<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>云顶轩 - 专业餐饮系统</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+SC:wght@300;400;500;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-gold: #C0A062;
            --primary-gold-dark: #a88a4e;
        }
        body {
            font-family: 'Noto Sans SC', sans-serif;
            overscroll-behavior: none;
        }
        .menu-item-grid {
            grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
        }
        .category-button.active {
            background-color: var(--primary-gold);
            color: #FFFFFF;
            font-weight: 700;
            transform: scale(1.05);
        }
        ::-webkit-scrollbar { width: 8px; }
        ::-webkit-scrollbar-track { background: #f1f1f1; }
        ::-webkit-scrollbar-thumb { background: var(--primary-gold); border-radius: 10px; }
        ::-webkit-scrollbar-thumb:hover { background: var(--primary-gold-dark); }
        input[type=number]::-webkit-inner-spin-button,
        input[type=number]::-webkit-outer-spin-button { -webkit-appearance: none; margin: 0; }
        input[type=number] { -moz-appearance: textfield; }
        .modal-radio-label { display: block; padding: 0.75rem 1rem; border: 1px solid #ddd; border-radius: 0.5rem; cursor: pointer; transition: all 0.2s ease-in-out; }
        .modal-radio-label:hover { border-color: var(--primary-gold); }
        input[type="radio"]:checked + .modal-radio-label { background-color: var(--primary-gold); color: white; border-color: var(--primary-gold); font-weight: 500; }
    </style>
</head>
<body class="bg-gray-100 antialiased">

    <!-- App Container -->
    <div id="app" class="w-full h-screen overflow-hidden">
        <!-- Login Page -->
        <div id="login-page" class="w-full h-full flex items-center justify-center bg-cover bg-center" style="background-image: url('https://images.unsplash.com/photo-1555396273-367ea4eb4db5?q=80&w=1974&auto=format&fit=crop');">
            <div class="bg-white/80 p-10 rounded-2xl shadow-2xl text-center max-w-md w-full backdrop-blur-sm">
                <h1 class="text-4xl font-bold text-gray-800 mb-2">云顶轩</h1>
                <p class="text-gray-600 mb-8">专业餐饮管理系统</p>
                <div class="mb-6">
                    <input type="text" id="waiter-id" placeholder="请输入 7 位服务员编号" class="w-full px-4 py-3 text-lg border-2 border-gray-300 rounded-lg focus:outline-none focus:border-[#C0A062] text-center tracking-[0.2em]" maxlength="7" pattern="\d{7}">
                </div>
                <button id="login-btn" class="w-full bg-[#C0A062] hover:bg-[#a88a4e] text-white text-xl font-bold py-3 px-4 rounded-lg transition duration-300 shadow-lg">登录</button>
                <p id="login-error" class="text-red-500 mt-4 h-6"></p>
            </div>
        </div>

        <!-- Setup Page -->
        <div id="setup-page" class="w-full h-full flex items-center justify-center bg-gray-50 hidden">
            <div class="bg-white p-10 rounded-2xl shadow-xl text-center max-w-lg w-full">
                <h2 class="text-3xl font-bold text-gray-800 mb-8">开台设置</h2>
                <div class="space-y-6">
                    <div>
                        <label for="guest-count" class="block text-left text-lg font-medium text-gray-700 mb-2">客人人数</label>
                        <input type="number" id="guest-count" placeholder="请输入客人数量" class="w-full px-4 py-3 text-lg border-2 border-gray-300 rounded-lg focus:outline-none focus:border-[#C0A062]">
                    </div>
                    <div>
                        <label for="dining-type" class="block text-left text-lg font-medium text-gray-700 mb-2">用餐类型</label>
                        <select id="dining-type" class="w-full px-4 py-3 text-lg border-2 border-gray-300 rounded-lg focus:outline-none focus:border-[#C0A062] bg-white">
                            <option value="商务">商务宴请</option>
                            <option value="包厢">私密包厢</option>
                            <option value="家庭">家庭聚会</option>
                            <option value="普通">大厅普通</option>
                            <option value="家常">朋友家常</option>
                        </select>
                    </div>
                </div>
                <button id="find-table-btn" class="w-full mt-10 bg-[#C0A062] hover:bg-[#a88a4e] text-white text-xl font-bold py-3 px-4 rounded-lg transition duration-300 shadow-lg">智能配桌并开始点餐</button>
                <p id="setup-error" class="text-red-500 mt-4 h-6"></p>
                <p id="table-recommendation" class="text-green-600 font-semibold mt-4 h-8 text-xl"></p>
            </div>
        </div>

        <!-- Menu Page -->
        <div id="menu-page" class="w-full h-screen flex hidden">
            <!-- Left Sidebar: Categories -->
            <aside class="w-64 bg-slate-800 text-white flex flex-col p-4 shadow-lg">
                <div class="text-center mb-6 border-b border-slate-600 pb-4">
                     <h1 class="text-2xl font-bold text-white">云顶轩</h1>
                     <p class="text-sm text-slate-400 mt-2">服务员: <span id="display-waiter-id"></span></p>
                     <p class="text-sm text-slate-400">桌号: <span id="display-table-info"></span></p>
                </div>
                <nav id="category-nav" class="flex-grow space-y-2 overflow-y-auto pr-2 -mr-4">
                </nav>
                 <button id="add-new-dish-btn-main" class="mt-4 w-full bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition duration-300">增加新菜品</button>
            </aside>

            <!-- Main Content: Dishes -->
            <main class="flex-1 bg-gray-100 p-6 overflow-y-auto">
                <h2 id="current-category-title" class="text-3xl font-bold text-gray-800 mb-6">推荐菜品</h2>
                <div id="menu-items-container" class="grid gap-6 menu-item-grid">
                </div>
            </main>

            <!-- Right Sidebar: Order Summary -->
            <aside class="w-96 bg-white p-6 flex flex-col shadow-2xl">
                <h3 class="text-2xl font-bold text-gray-800 border-b-2 border-gray-200 pb-4 mb-4">当前订单</h3>
                <div id="order-summary" class="flex-grow overflow-y-auto -mr-6 pr-6">
                    <p id="empty-order-message" class="text-gray-500 text-center mt-10">您的订单是空的</p>
                </div>
                <div class="mt-auto border-t-2 border-gray-200 pt-4">
                    <div class="flex justify-between items-center text-xl font-bold text-gray-800 mb-4">
                        <span>总计</span>
                        <span id="total-price">¥ 0.00</span>
                    </div>
                    <button id="submit-order-btn" class="w-full bg-red-600 hover:bg-red-700 text-white text-xl font-bold py-3 px-4 rounded-lg transition duration-300 disabled:bg-gray-400" disabled>发送至厨房</button>
                </div>
            </aside>
        </div>
        
        <!-- Confirmation Page -->
        <div id="confirmation-page" class="w-full h-full flex items-center justify-center bg-green-50 hidden">
            <div class="bg-white p-12 rounded-2xl shadow-xl text-center max-w-lg w-full">
                <svg class="w-24 h-24 text-green-500 mx-auto mb-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                <h2 class="text-4xl font-bold text-gray-800 mb-4">下单成功</h2>
                <p class="text-xl text-gray-600 mb-8">订单已成功发送至厨房</p>
                <button id="new-order-btn" class="w-full bg-[#C0A062] hover:bg-[#a88a4e] text-white text-xl font-bold py-3 px-4 rounded-lg transition duration-300">创建新订单</button>
            </div>
        </div>
    </div>
    
    <!-- Modals -->
     <div id="item-options-modal" class="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center hidden z-50 p-4">
        <div class="bg-white p-6 rounded-lg shadow-xl w-full max-w-md max-h-[90vh] flex flex-col">
            <h3 class="text-2xl font-bold mb-4 text-gray-800 flex-shrink-0" id="item-options-title">菜品选项</h3>
            <div class="overflow-y-auto space-y-5 pr-2 -mr-4 flex-grow">
                <div id="portions-section" class="hidden">
                    <h4 class="font-semibold text-gray-700 mb-2">选择分量</h4>
                    <div id="portions-container" class="grid grid-cols-3 gap-2"></div>
                </div>
                <div id="cooking-styles-section" class="hidden">
                    <h4 class="font-semibold text-gray-700 mb-2">选择做法</h4>
                    <div id="cooking-styles-container" class="grid grid-cols-2 gap-2"></div>
                </div>
                <div id="custom-price-section" class="hidden">
                    <h4 class="font-semibold text-gray-700 mb-2">时令价 (每 <span id="custom-price-unit"></span>)</h4>
                    <input type="number" id="custom-price-input" class="w-full px-4 py-2 border rounded-lg text-lg" placeholder="输入当前市价">
                </div>
                <div id="weight-section" class="hidden">
                    <h4 class="font-semibold text-gray-700 mb-2">输入数量 (<span id="weight-unit"></span>)</h4>
                    <input type="number" id="weight-input" class="w-full px-4 py-2 border rounded-lg text-lg" placeholder="例如: 1.5">
                </div>
            </div>
            <div class="flex justify-end space-x-4 mt-6 flex-shrink-0">
                <button id="cancel-options-btn" class="px-6 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400">取消</button>
                <button id="confirm-options-btn" class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">确认添加</button>
            </div>
        </div>
    </div>

    <div id="add-dish-modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
        <div class="bg-white p-8 rounded-lg shadow-xl w-full max-w-lg">
            <h3 class="text-2xl font-bold mb-6">增加新菜品</h3>
            <div class="space-y-4">
                <input type="text" id="new-dish-name" placeholder="菜品名称" class="w-full px-4 py-2 border rounded-lg">
                <input type="text" id="new-dish-price" placeholder="价格(数字,或小:28,中:38,大:58)" class="w-full px-4 py-2 border rounded-lg">
                <select id="new-dish-category" class="w-full px-4 py-2 border rounded-lg bg-white"></select>
                <select id="new-dish-type" class="w-full px-4 py-2 border rounded-lg bg-white">
                    <option value="商务">商务</option><option value="包厢">包厢</option><option value="家庭">家庭</option>
                    <option value="普通">普通</option><option value="家常">家常</option><option value="招牌">招牌</option>
                </select>
                <input type="text" id="new-dish-unit" placeholder="单位 (例如: 份, 公斤, 个)" class="w-full px-4 py-2 border rounded-lg">
                <input type="text" id="new-dish-cooking-styles" placeholder="可选做法 (用逗号分隔,如 蒸,炒)" class="w-full px-4 py-2 border rounded-lg">
                <textarea id="new-dish-desc" placeholder="菜品描述 (可选)" class="w-full px-4 py-2 border rounded-lg" rows="3"></textarea>
                 <div>
                    <input type="checkbox" id="new-dish-custom-price" class="mr-2"><label for="new-dish-custom-price">是否为时令价菜品</label>
                </div>
            </div>
            <div class="flex justify-end space-x-4 mt-6">
                <button id="cancel-add-dish-btn" class="px-6 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400">取消</button>
                <button id="confirm-add-dish-btn" class="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">确认增加</button>
            </div>
        </div>
    </div>
    
    <script type="module">
        // Import Firebase modules
        import { initializeApp } from "https://www.gstatic.com/firebasejs/12.2.1/firebase-app.js";
        import { getFirestore, collection, addDoc, serverTimestamp } from "https://www.gstatic.com/firebasejs/12.2.1/firebase-firestore.js";
        import { getAuth, signInAnonymously } from "https://www.gstatic.com/firebasejs/12.2.1/firebase-auth.js";
        
        let db;

        async function initializeFirebase() {
            // Your web app's Firebase configuration
            const firebaseConfig = {
                apiKey: "AIzaSyBjF_aSG30O_l8q4btRxdxpsz4ftwrsM1g",
                authDomain: "yundingxuan-restaurant.firebaseapp.com",
                projectId: "yundingxuan-restaurant",
                storageBucket: "yundingxuan-restaurant.appspot.com",
                messagingSenderId: "534167593828",
                appId: "1:534167593828:web:9fb11dac7e69c11324d071",
                measurementId: "G-218QGY5V8N"
            };

            try {
                const app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                const auth = getAuth(app);
                await signInAnonymously(auth);
                console.log("Firebase initialized and signed in anonymously.");
                return true;
            } catch (error) {
                console.error("Firebase initialization failed:", error);
                alert("无法连接到厨房系统，请检查网络或配置。");
                return false;
            }
        }
        
        // --- All other application logic remains the same ---
        let currentWaiterId = null;
        let currentTableInfo = null;
        let currentOrder = [];
        let menuData = {};

        const initialMenuData = {
            '饭类': [{ id: 101, name: '东北五常蒸米饭', price: 5, type: '家常', unit: '碗', desc: '选用黑龙江五常核心产区稻花香米，泉水蒸制，米香四溢，粒粒分明。' }, { id: 102, name: '广式腊味煲仔饭', price: 48, type: '普通', unit: '份', desc: '精选皇上皇腊肠与润肠，搭配丝苗米猛火煲制，锅巴金黄香脆，油润甘香。' }, { id: 103, name: '黑松露福建炒饭', price: 88, type: '商务', unit: '份', desc: '将意大利黑松露酱、鲜虾、鸡肉、瑶柱等食材烩成芡汁，淋在蛋炒饭上，鲜美丰润。' }, { id: 104, name: '金牌扬州炒饭', price: 38, type: '普通', unit: '份', desc: '米饭颗粒分明，配料选用火腿、虾仁、青豆、笋丁，蛋松金黄，清香爽口。' }, { id: 105, name: '至尊海鲜焗饭', price: 98, type: '包厢', unit: '份', desc: '大虾、青口、鱿鱼等多种海鲜，与奶油白酱、马苏里拉芝士一同焗烤，奶香浓郁。' }, { id: 106, name: '嘉兴鲜肉粽', price: 18, type: '家常', unit: '个', desc: '遵循传统嘉兴工艺，精选五花肉与糯米，经长时间焖煮，肥而不腻，糯而不烂。' }, { id: 107, name: '生炒走地鸡糯米饭', price: 58, type: '家庭', unit: '份', desc: '将生糯米与腌制好的走地鸡块、冬菇、腊味一同生炒至熟，饭粒干身，香气扑鼻。' }, { id: 108, name: '鲍汁瑶柱荷叶饭', price: 68, type: '家庭', unit: '份', desc: '荷叶包裹着吸收了鲍汁和瑶柱鲜味的米饭，清香与浓香交织，回味无穷。' }, ],
            '菜类': [{ id: 201, name: '开水白菜', price: 128, type: '商务', unit: '位', desc: '国宴名菜，看似清水，实则是用老母鸡、火腿、干贝等吊制的顶级清汤，汤味浓醇，白菜软嫩化渣。' }, { id: 202, name: '西红柿炒鸡蛋', price: 28, type: '家常', unit: '份', desc: '最平凡的家常味道，选用有机番茄与农家土鸡蛋，酸甜可口，营养下饭。' }, { id: 203, name: '麻婆豆腐', price: { '小': 32, '中': 42, '大': 52 }, type: '家常', unit: '份', desc: '集川菜“麻、辣、烫、香、酥、嫩、鲜、活”八味于一体，豆腐滑嫩，肉末酥香。' }, { id: 204, name: '鱼香茄子煲', price: 48, type: '家庭', unit: '份', desc: '茄子经油炸后与特调鱼香汁在砂锅中焖烧，咸、甜、酸、辣、鲜、香，滋味复合。' }, { id: 205, name: '清炒时蔬', price: 32, type: '普通', unit: '份', desc: '每日精选最新鲜的时令蔬菜，以最简单的烹饪方式呈现蔬菜的本味甘甜。' }, { id: 207, name: '瑶柱扒西兰花', price: 68, type: '包厢', unit: '份', desc: '精选干瑶柱撕成丝，熬制成鲜美芡汁，淋在焯烫好的西兰花上，清淡而不失鲜美。' }, { id: 208, name: '金汤娃娃菜', price: 58, type: '包厢', unit: '份', desc: '用老鸡、南瓜蓉等精心熬制的金黄色浓汤，汤底鲜甜，娃娃菜吸收汤汁后极为可口。' }, { id: 210, name: '松茸菌炖绣球豆腐', price: 198, type: '商务', unit: '位', desc: '考验极致刀工的菜品，将整块豆腐切成数千根细丝呈绣球状，配以珍贵松茸清炖，汤鲜味绝。' }, ],
            '海鲜类': [{ id: 301, name: '东星斑', price: 688, type: '商务', unit: '公斤', desc: '顶级石斑，肉质雪白鲜嫩，最能体现其本味。', isCustomizable: true, cookingStyles: ['清蒸', '豉汁蒸', '油浸'] }, { id: 302, name: '澳洲龙虾', price: 998, type: '包厢', unit: '公斤', desc: '肉质饱满弹牙，味道鲜美。', isCustomizable: true, cookingStyles: ['刺身', '蒜蓉开边蒸', '避风塘', '上汤焗'] }, { id: 303, name: '蒜蓉粉丝蒸扇贝', price: 18, type: '普通', unit: '个', desc: '精选大连鲜活扇贝，搭配龙口粉丝与秘制蒜蓉酱蒸制，是经久不衰的经典。' }, { id: 304, name: '肉蟹', price: 298, type: '包厢', unit: '公斤', desc: '选用东南亚肉蟹，蟹肉饱满。', isCustomizable: true, cookingStyles: ['避风塘炒', '姜葱炒', '黑椒炒', '清蒸'] }, { id: 305, name: '九节虾', price: 258, type: '家庭', unit: '公斤', desc: '虾壳色泽鲜亮，肉质爽脆清甜。', isCustomizable: true, cookingStyles: ['白灼', '椒盐', '美极'] }, { id: 306, name: '黄花鱼', price: 198, type: '家庭', unit: '条', desc: '野生黄花鱼，肉质呈蒜瓣状，鲜美嫩滑，少刺。', cookingStyles: ['古法蒸', '红烧', '干烧'] }, ],
            '肉类': [{ id: 401, name: '御品佛跳墙', price: 388, type: '商务', unit: '位', desc: '精选鲍鱼、海参、花胶、瑶柱等十几种珍贵食材，文火慢炖超过八小时，汤汁浓郁醇厚，胶质丰富。' }, { id: 402, name: '果木北京烤鸭', price: 298, type: '包厢', unit: '套', desc: '选用填鸭，以苹果木、枣木等果木为燃料烤制，鸭皮酥脆流油，肉质细嫩，配以薄饼、甜面酱、葱丝、黄瓜条。' }, { id: 403, name: '秘制东坡肉', price: 88, type: '包厢', unit: '份', desc: '选用上好五花肉，经焯水、定型、油炸、焖烧等多道工序，色泽红亮如玛瑙，入口即化，肥而不腻。' }, { id: 404, name: '黑椒安格斯牛仔骨', price: 188, type: '商务', unit: '份', desc: '选用美国安格斯牛仔骨，肉质细嫩多汁，搭配现磨黑胡椒与秘制酱汁，香气浓郁，回味无穷。' }, { id: 405, name: '糖醋里脊', price: { '小': 48, '中': 58, '大': 68 }, type: '家庭', unit: '份', desc: '选用猪外脊，外酥里嫩，酸甜的酱汁包裹着每一块里脊，是老少咸宜的开胃菜。' }, { id: 407, name: '川味水煮牛肉', price: { '小': 68, '中': 88, '大': 108 }, type: '普通', unit: '份', desc: '牛肉滑嫩，汤底麻辣鲜香，配以豆芽、青笋等蔬菜，最后淋上滚烫的热油，激发所有香料的味道。' }, ],
            '套餐类': [{ id: 501, name: '商务双人套餐', price: 498, type: '商务', unit: '套', desc: '专为商务洽谈设计，菜品精致。包含：\n- 凉菜: 蓝莓山药\n- 主菜: 黑椒安格斯牛仔骨, 瑶柱扒西兰花\n- 汤品: 松茸菌炖绣球豆腐(2位)\n- 主食: 黑松露福建炒饭\n- 饮品: 西湖龙井(1泡)' }, { id: 502, name: '温馨家庭四人餐', price: 688, type: '家庭', unit: '套', desc: '营养均衡，老少咸宜。包含：\n- 凉菜: 夫妻肺片\n- 主菜: 秘制东坡肉, 古法蒸黄花鱼, 糖醋里脊(中), 清炒时蔬\n- 汤品: 金汤娃娃菜\n- 主食: 扬州炒饭(2份)\n- 饮品: 鲜榨橙汁(1扎)' }, { id: 503, name: '豪华包厢六人宴', price: 1588, type: '包厢', unit: '套', desc: '宴请贵客，彰显品味。包含：\n- 凉菜: 捞汁小海鲜, 脆皮烧肉\n- 主菜: 果木北京烤鸭(一套), 清蒸东星斑(约1.2斤), 蒜蓉粉丝蒸扇贝(6只), 黑椒安格斯牛仔骨, 金汤娃娃菜\n- 汤品: 御品佛跳墙(6位)\n- 主食: 鲍汁瑶柱荷叶饭(2份)\n- 饮品: 武夷山大红袍(1泡)' }, ],
            '饮料酒茶': [{ id: 601, name: '鲜榨橙汁', price: 38, type: '普通', unit: '扎', desc: '' }, { id: 602, name: '可口可乐', price: 8, type: '普通', unit: '听', desc: '' }, { id: 603, name: '53°飞天茅台(500ml)', price: 2999, type: '商务', unit: '瓶', desc: '酱香典范，国酒茅台，商务宴请首选。' }, { id: 604, name: '五粮液·普五(500ml)', price: 1399, type: '商务', unit: '瓶', desc: '浓香型白酒代表，窖香浓郁，入口绵甜。' }, { id: 607, name: '武夷山大红袍', price: 128, type: '包厢', unit: '泡', desc: '产自福建武夷山，具有独特的“岩骨花香”，滋味醇厚，回甘明显。' }, { id: 608, name: '西湖龙井', price: 118, type: '包厢', unit: '泡', desc: '产自杭州西湖产区，以“色绿、香郁、味甘、形美”四绝著称。' }, ],
        };
        menuData = JSON.parse(JSON.stringify(initialMenuData));
        let categories = Object.keys(menuData);
        let nextDishId = 700;
        const pages = { login: document.getElementById('login-page'), setup: document.getElementById('setup-page'), menu: document.getElementById('menu-page'), confirmation: document.getElementById('confirmation-page'), };
        const waiterIdInput = document.getElementById('waiter-id'), loginBtn = document.getElementById('login-btn'), loginError = document.getElementById('login-error');
        const guestCountInput = document.getElementById('guest-count'), diningTypeSelect = document.getElementById('dining-type'), findTableBtn = document.getElementById('find-table-btn'), setupError = document.getElementById('setup-error'), tableReco = document.getElementById('table-recommendation');
        const categoryNav = document.getElementById('category-nav'), menuItemsContainer = document.getElementById('menu-items-container'), currentCategoryTitle = document.getElementById('current-category-title'), orderSummaryContainer = document.getElementById('order-summary'), totalPriceEl = document.getElementById('total-price'), submitOrderBtn = document.getElementById('submit-order-btn'), emptyOrderMessage = document.getElementById('empty-order-message'), displayWaiterId = document.getElementById('display-waiter-id'), displayTableInfo = document.getElementById('display-table-info');
        const newOrderBtn = document.getElementById('new-order-btn');
        const optionsModal = document.getElementById('item-options-modal'), optionsTitle = document.getElementById('item-options-title'), portionsSection = document.getElementById('portions-section'), portionsContainer = document.getElementById('portions-container'), cookingStylesSection = document.getElementById('cooking-styles-section'), cookingStylesContainer = document.getElementById('cooking-styles-container'), customPriceSection = document.getElementById('custom-price-section'), customPriceInput = document.getElementById('custom-price-input'), customPriceUnit = document.getElementById('custom-price-unit'), weightSection = document.getElementById('weight-section'), weightInput = document.getElementById('weight-input'), weightUnit = document.getElementById('weight-unit'), cancelOptionsBtn = document.getElementById('cancel-options-btn'), confirmOptionsBtn = document.getElementById('confirm-options-btn');
        const addDishModal = document.getElementById('add-dish-modal'), addNewDishBtnMain = document.getElementById('add-new-dish-btn-main'), newDishNameInput = document.getElementById('new-dish-name'), newDishPriceInput = document.getElementById('new-dish-price'), newDishCategorySelect = document.getElementById('new-dish-category'), newDishTypeSelect = document.getElementById('new-dish-type'), newDishUnitInput = document.getElementById('new-dish-unit'), newDishDescInput = document.getElementById('new-dish-desc'), newDishCookingStylesInput = document.getElementById('new-dish-cooking-styles'), newDishCustomPriceCheckbox = document.getElementById('new-dish-custom-price'), cancelAddDishBtn = document.getElementById('cancel-add-dish-btn'), confirmAddDishBtn = document.getElementById('confirm-add-dish-btn');
        let currentItemForOptions = null;
        
        const switchPage = (pageName) => {
            Object.values(pages).forEach(page => page.classList.add('hidden'));
            pages[pageName].classList.remove('hidden');
        };

        const renderCategories = () => {
            categoryNav.innerHTML = '';
            categories.forEach((cat, index) => {
                const button = document.createElement('button');
                button.className = `w-full text-left px-4 py-3 rounded-lg transition-all duration-200 hover:bg-[#C0A062] category-button`;
                button.textContent = cat;
                if (index === 0) button.classList.add('active');
                button.addEventListener('click', () => {
                    document.querySelectorAll('.category-button').forEach(btn => btn.classList.remove('active'));
                    button.classList.add('active');
                    renderMenuItems(cat);
                });
                categoryNav.appendChild(button);
            });
        };

        const renderMenuItems = (category) => {
            currentCategoryTitle.textContent = category;
            menuItemsContainer.innerHTML = '';
            const items = menuData[category] || [];
            items.forEach(item => {
                const card = document.createElement('div');
                card.className = 'bg-white rounded-xl shadow-lg overflow-hidden flex flex-col transition-transform hover:shadow-2xl hover:-translate-y-1';
                let priceDisplay = '';
                if (typeof item.price === 'object') { priceDisplay = `¥${Object.values(item.price)[0]}起/${item.unit}`; } 
                else { priceDisplay = `¥${item.price}/${item.unit}`; }
                card.innerHTML = `<div class="p-5 flex-grow"><div class="flex justify-between items-start"><h4 class="text-xl font-bold text-gray-800">${item.name}</h4><span class="text-lg font-semibold text-amber-700 whitespace-nowrap pl-4">${priceDisplay}</span></div><p class="text-gray-600 mt-2 text-sm whitespace-pre-wrap">${item.desc || ''}</p></div><button data-id="${item.id}" data-category="${category}" class="add-to-order-btn w-full bg-slate-800 hover:bg-[#C0A062] text-white font-bold py-3 px-4 transition duration-300">加入订单</button>`;
                menuItemsContainer.appendChild(card);
            });
        };

        const updateOrderSummary = () => {
            orderSummaryContainer.innerHTML = '';
            if (currentOrder.length === 0) {
                orderSummaryContainer.appendChild(emptyOrderMessage);
                emptyOrderMessage.classList.remove('hidden');
                submitOrderBtn.disabled = true;
            } else {
                emptyOrderMessage.classList.add('hidden');
                currentOrder.forEach((orderItem, index) => {
                    let details = [];
                    if(orderItem.selectedPortion) details.push(orderItem.selectedPortion);
                    if(orderItem.selectedStyle) details.push(orderItem.selectedStyle);
                    if(orderItem.weight) details.push(`${orderItem.weight}${orderItem.unit}`);
                    const itemEl = document.createElement('div');
                    itemEl.className = 'flex justify-between items-center py-3 border-b border-gray-100';
                    itemEl.innerHTML = `<div class="flex-grow pr-2"><p class="font-semibold text-gray-800">${orderItem.name}</p>${details.length > 0 ? `<p class="text-sm text-gray-500">${details.join(', ')}</p>` : ''}</div><div class="flex items-center space-x-3"><button data-index="${index}" class="quantity-change-btn decrease-btn bg-gray-200 w-6 h-6 rounded-full font-bold text-gray-600">-</button><span class="font-semibold w-4 text-center">${orderItem.quantity}</span><button data-index="${index}" class="quantity-change-btn increase-btn bg-gray-200 w-6 h-6 rounded-full font-bold text-gray-600">+</button></div><span class="w-24 text-right font-bold text-gray-800">¥${(orderItem.finalPrice * orderItem.quantity).toFixed(2)}</span>`;
                    orderSummaryContainer.appendChild(itemEl);
                });
                submitOrderBtn.disabled = false;
            }
            const totalPrice = currentOrder.reduce((total, item) => total + (item.finalPrice * item.quantity), 0);
            totalPriceEl.textContent = `¥ ${totalPrice.toFixed(2)}`;
        };

        const handleOpenOptionsModal = (item) => {
            currentItemForOptions = item;
            optionsTitle.textContent = item.name;
            [portionsSection, cookingStylesSection, customPriceSection, weightSection].forEach(s => s.classList.add('hidden'));
            portionsContainer.innerHTML = '';
            cookingStylesContainer.innerHTML = '';
            if (typeof item.price === 'object') {
                portionsSection.classList.remove('hidden');
                Object.entries(item.price).forEach(([size, price], index) => { portionsContainer.innerHTML += `<div><input type="radio" name="portion" value="${size}" id="portion-${size}" class="sr-only" ${index === 0 ? 'checked' : ''}><label for="portion-${size}" class="modal-radio-label">${size} (¥${price})</label></div>`; });
            }
            if (item.cookingStyles && item.cookingStyles.length > 0) {
                cookingStylesSection.classList.remove('hidden');
                item.cookingStyles.forEach((style, index) => { cookingStylesContainer.innerHTML += `<div><input type="radio" name="cooking-style" value="${style}" id="style-${style}" class="sr-only" ${index === 0 ? 'checked' : ''}><label for="style-${style}" class="modal-radio-label">${style}</label></div>`; });
            }
            if (item.isCustomizable) {
                customPriceSection.classList.remove('hidden');
                customPriceUnit.textContent = item.unit;
                customPriceInput.value = item.price;
                weightSection.classList.remove('hidden');
                weightUnit.textContent = item.unit;
                weightInput.value = '';
            }
            optionsModal.classList.remove('hidden');
            if(item.isCustomizable) { customPriceInput.focus(); customPriceInput.select(); }
        };

        const handleConfirmOptions = () => {
            const item = currentItemForOptions;
            let finalPrice = typeof item.price === 'number' ? item.price : 0;
            let selectedPortion = null, selectedStyle = null, weight = null;
            if (typeof item.price === 'object') {
                const portionInput = portionsContainer.querySelector('input[name="portion"]:checked');
                selectedPortion = portionInput ? portionInput.value : Object.keys(item.price)[0];
                finalPrice = item.price[selectedPortion];
            }
            if (item.cookingStyles && item.cookingStyles.length > 0) {
                 const styleInput = cookingStylesContainer.querySelector('input[name="cooking-style"]:checked');
                 selectedStyle = styleInput ? styleInput.value : item.cookingStyles[0];
            }
            if (item.isCustomizable) {
                const customPrice = parseFloat(customPriceInput.value);
                weight = parseFloat(weightInput.value);
                if(isNaN(customPrice) || customPrice <= 0) { alert('请输入有效的时令价！'); return; }
                if(isNaN(weight) || weight <= 0) { alert('请输入有效的数量！'); return; }
                finalPrice = customPrice * weight;
            }
            currentOrder.push({ ...item, quantity: 1, finalPrice, selectedPortion, selectedStyle, weight });
            updateOrderSummary();
            optionsModal.classList.add('hidden');
        };

        const handleAddToOrderClick = (e) => {
            if (!e.target.classList.contains('add-to-order-btn')) return;
            const { id, category } = e.target.dataset;
            const item = menuData[category].find(d => d.id == id);
            const hasOptions = typeof item.price === 'object' || (item.cookingStyles && item.cookingStyles.length > 0) || item.isCustomizable;
            if (hasOptions) { handleOpenOptionsModal(item); } 
            else {
                const existingItem = currentOrder.find(orderItem => orderItem.id === item.id && !orderItem.selectedPortion && !orderItem.selectedStyle);
                if (existingItem) { existingItem.quantity++; } 
                else { currentOrder.push({ ...item, quantity: 1, finalPrice: item.price }); }
                updateOrderSummary();
            }
        };

        const handleQuantityChange = (e) => {
            if (!e.target.classList.contains('quantity-change-btn')) return;
            const index = parseInt(e.target.dataset.index);
            const orderItem = currentOrder[index];
            if (e.target.classList.contains('increase-btn')) { orderItem.quantity++; } 
            else if (e.target.classList.contains('decrease-btn')) {
                orderItem.quantity--;
                if (orderItem.quantity === 0) { currentOrder.splice(index, 1); }
            }
            updateOrderSummary();
        };

        const openAddDishModal = () => {
            [newDishNameInput, newDishPriceInput, newDishUnitInput, newDishDescInput, newDishCookingStylesInput].forEach(i => i.value = '');
            newDishCustomPriceCheckbox.checked = false;
            newDishCategorySelect.innerHTML = categories.map(cat => `<option value="${cat}">${cat}</option>`).join('');
            addDishModal.classList.remove('hidden');
        };

        const handleAddNewDish = () => {
            const name = newDishNameInput.value.trim();
            const priceStr = newDishPriceInput.value.trim();
            const category = newDishCategorySelect.value;
            const type = newDishTypeSelect.value;
            const unit = newDishUnitInput.value.trim() || '份';
            const desc = newDishDescInput.value.trim();
            const cookingStylesStr = newDishCookingStylesInput.value.trim();
            const isCustomizable = newDishCustomPriceCheckbox.checked;
            if (!name || !priceStr) { alert('请输入有效的菜品名称和价格！'); return; }
            let price;
            if (priceStr.includes(':')) {
                try { price = priceStr.split(',').reduce((obj, part) => { const [key, value] = part.split(':'); obj[key.trim()] = parseFloat(value); return obj; }, {}); } 
                catch (e) { alert('分量价格格式错误！请使用 "名称:价格,名称:价格" 的格式。'); return; }
            } else {
                price = parseFloat(priceStr);
                if (isNaN(price)) { alert('价格必须是数字！'); return; }
            }
            const newDish = { id: nextDishId++, name, price, type, unit, desc, isCustomizable, cookingStyles: cookingStylesStr ? cookingStylesStr.split(',').map(s => s.trim()) : [] };
            if (!menuData[category]) menuData[category] = [];
            menuData[category].push(newDish);
            addDishModal.classList.add('hidden');
            if(currentCategoryTitle.textContent === category) { renderMenuItems(category); }
            alert('新菜品添加成功！');
        };

        const handleLogin = () => {
            const id = waiterIdInput.value;
            if (/^\d{7}$/.test(id)) { currentWaiterId = id; displayWaiterId.textContent = currentWaiterId; switchPage('setup'); } 
            else { loginError.textContent = '请输入有效的 7 位数字编号。'; }
        };

        const handleFindTable = () => {
            const guests = parseInt(guestCountInput.value);
            if (isNaN(guests) || guests <= 0) { setupError.textContent = '请输入有效的客人人数。'; return; }
            let tableType = guests <= 2 ? 'A' : guests <= 4 ? 'B' : guests <= 8 ? 'C' : 'V';
            currentTableInfo = `${tableType}${Math.floor(Math.random() * 50) + 1}`;
            displayTableInfo.textContent = currentTableInfo;
            tableReco.textContent = `已为您推荐桌号: ${currentTableInfo}`;
            setTimeout(() => {
                switchPage('menu');
                renderCategories();
                renderMenuItems(categories[0]);
                updateOrderSummary();
            }, 1500);
        };
        
        const handleNewOrder = () => {
            currentOrder = [];
            currentTableInfo = null;
            guestCountInput.value = '';
            tableReco.textContent = '';
            setupError.textContent = '';
            switchPage('setup');
        };

        const handleSubmitOrder = async () => {
            if (currentOrder.length === 0 || !db) return;

            submitOrderBtn.disabled = true;
            submitOrderBtn.textContent = '发送中...';

            const orderPayload = {
                waiterId: currentWaiterId,
                tableId: currentTableInfo,
                status: 'new',
                timestamp: serverTimestamp(),
                items: currentOrder.map(item => ({
                    name: item.name,
                    quantity: item.quantity,
                    unit: item.unit,
                    selectedPortion: item.selectedPortion || null,
                    selectedStyle: item.selectedStyle || null,
                    weight: item.weight || null,
                    status: 'new'
                }))
            };

            try {
                // IMPORTANT: Make sure to send to a globally accessible path if rules require it.
                // Assuming public access for this app version.
                const docRef = await addDoc(collection(db, "orders"), orderPayload);
                console.log("Order sent with ID: ", docRef.id);
                switchPage('confirmation');
            } catch (e) {
                console.error("Error sending order: ", e);
                alert("发送订单失败，请检查网络后重试！");
            } finally {
                submitOrderBtn.disabled = false;
                submitOrderBtn.textContent = '发送至厨房';
            }
        };

        async function setupAndRun() {
            const firebaseReady = await initializeFirebase();
            if (!firebaseReady) {
                const submitBtn = document.getElementById('submit-order-btn');
                if(submitBtn) {
                    submitBtn.disabled = true;
                    submitBtn.textContent = '厨房系统离线';
                    submitBtn.classList.remove('bg-red-600', 'hover:bg-red-700');
                    submitBtn.classList.add('bg-gray-400', 'cursor-not-allowed');
                }
                 return;
            }
            
            loginBtn.addEventListener('click', handleLogin);
            waiterIdInput.addEventListener('keydown', (e) => { if (e.key === 'Enter') handleLogin(); });
            findTableBtn.addEventListener('click', handleFindTable);
            menuItemsContainer.addEventListener('click', handleAddToOrderClick);
            orderSummaryContainer.addEventListener('click', handleQuantityChange);
            submitOrderBtn.addEventListener('click', handleSubmitOrder);
            newOrderBtn.addEventListener('click', handleNewOrder);
            cancelOptionsBtn.addEventListener('click', () => optionsModal.classList.add('hidden'));
            confirmOptionsBtn.addEventListener('click', handleConfirmOptions);
            addNewDishBtnMain.addEventListener('click', openAddDishModal);
            cancelAddDishBtn.addEventListener('click', () => addDishModal.classList.add('hidden'));
            confirmAddDishBtn.addEventListener('click', handleAddNewDish);
            
            switchPage('login');
            waiterIdInput.focus();
        };

        setupAndRun();
    </script>
</body>
</html>

